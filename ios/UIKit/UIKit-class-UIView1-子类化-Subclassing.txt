tune[英][tju:n] [美][tu:n]
n.曲调，曲子；和谐，调谐；语调；心情
vt.调整；使和谐，使一致；调整（频率）；为…调音
vi.协调；[无线]调谐

The UIView class is a key subclassing point for visual content that also requires user interactions. 
Although there are many good reasons to subclass UIView, 
it is recommended that you do so only 
when the basic UIView class or the standard system views do not provide the capabilities that you need.
 
Subclassing requires more work on your part to implement the view and to tune its performance.

-------------------------------------
Methods to Override
-------------------------------------
handful[英][ˈhændfʊl] [美][ˈhændˌfʊl]
n.少数，少量；一把（的量）；难以控制的人（或动物）；棘手事
configurable[英][kən'fɪgərəbl] [美][kən'fɪgərəbl]
adj.结构的，可配置的
sophisticated[英][səˈfɪstɪkeɪtɪd] [美][səˈfɪstɪˌketɪd]
v.使变得世故；使迷惑；篡改(sophisticate的过去分词形式)

When subclassing UIView, 
there are only a handful of methods you should override and 
many methods that you might override depending on your needs. 

Because UIView is a highly configurable class, 
there are also many ways to implement sophisticated view behaviors without overriding custom methods, 
which are discussed in the Alternatives to Subclassing section. 

In the meantime, the following list includes the methods you might consider overriding 
in your UIView subclasses:

Initialization:
1）initWithFrame: - It is recommended that you implement this method. 
                    You can also implement custom initialization methods in addition to, or instead of, this method.
2）initWithCoder: - Implement this method if you load your view from an Interface Builder nib file and 
                    your view requires custom initialization.
3）layerClass - Implement this method only 
                if you want your view to use a different Core Animation layer for its backing store. 
                For example, if your view uses tiling to display a large scrollable area, 
                you might want to override this method and return the CATiledLayer class.

Drawing and printing:
1）drawRect: - Implement this method if your view draws custom content. 
               If your view does not do any custom drawing, avoid overriding this method.
1）drawRect:forViewPrintFormatter: - Implement this method only if you want to 
                                     draw your view’s content differently during printing.

Constraints:
1）requiresConstraintBasedLayout - Implement this class method if your view class requires constraints to work properly.
1）updateConstraints - Implement this method if your view needs to create custom constraints between your subviews.
1）alignmentRectForFrame:, frameForAlignmentRect: - Implement these methods to override how your views are aligned to other views.

Layout:
1）sizeThatFits: - 
Implement this method if you want your view to have a different default size than it normally would during resizing operations. 
For example, 
you might use this method to prevent your view from shrinking to the point where subviews cannot be displayed correctly.
1）layoutSubviews - 
Implement this method if you need more precise control over the layout of your subviews than either the constraint or autoresizing behaviors provide.
1）didAddSubview:, willRemoveSubview: - 
Implement these methods as needed to track the additions and removals of subviews.
1）willMoveToSuperview:, didMoveToSuperview - 
Implement these methods as needed to track the movement of the current view in your view hierarchy.
1）willMoveToWindow:, didMoveToWindow - 
Implement these methods as needed to track the movement of your view to a different window.

Event Handling:
1）touchesBegan:withEvent:, touchesMoved:withEvent:, touchesEnded:withEvent:, touchesCancelled:withEvent: - 
Implement these methods if you need to handle touch events directly. (For gesture-based input, use gesture recognizers.)
1）gestureRecognizerShouldBegin: - 
Implement this method if your view handles touch events directly and might want to prevent attached gesture recognizers from triggering additional actions.